#=============================================================================
# SAMPLE RedHat Kickstart autoinstall file for use with Virtualbox.
# This file will result in an system that is staged, that is, the OS is ready,
# the repos are set up, a user is built and all you have to do is log in as 
# that account, run the prep.sh script and follow the instructions to achieve 
# a system compatible with the lab described in Appendix B of Marko Luksa's 
# "Kubernetes in Action" book.
#
# Important: Before you use this file:
# - Make sure you change the passwords, account ID and keys. 
#=============================================================================


# Use CDROM installation media
cdrom
text
keyboard --vckeymap=us --xlayouts=''
lang en_US.UTF-8

# Network information
network  --bootproto=dhcp --device=eth0 --noipv6 --activate
firstboot --reconfig

# System authorization information
auth --enableshadow --passalgo=sha512
rootpw --plaintext CHANGEME

# You can add users here too, which is a good thing to do so that
# you immediately have a user other than root to work with.
#user --groups=wheel --name=jdoe --password=INEEDCHANGE --plaintext --gecos="Jane Doe"

# System services
services --enabled="chronyd"
timezone Etc/UTC --isUtc

# Partition
ignoredisk --only-use=sda
clearpart --none --initlabel
autopart --type=lvm

# Disable firewall
firewall --disabled
selinux --disabled

# Do not configure the X Window System
skipx

%packages
@core
chrony
kexec-tools
%end

%addon com_redhat_kdump --disable
%end

%anaconda
pwpolicy root --minlen=6 --minquality=1 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=1 --notstrict --nochanges --emptyok
pwpolicy luks --minlen=6 --minquality=1 --notstrict --nochanges --notempty
%end

# After install, you can do all sorts of clever things, like inject SSH keys and suchlike
%post --interpreter=/usr/bin/bash

#mkdir --mode 700 /home/jdoe/.ssh
#echo "ssh-rsa CHANGEME rsa-key-20200714" > /home/jdoe/.ssh/authorized_keys
#chmod 400 /home/jdoe/.ssh/authorized_keys

cat - <<EOF1 > /home/jdoe/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=http://yum.kubernetes.io/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg
        https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF1
cp /home/jdoe/kubernetes.repo /etc/yum.repos.d/kubernetes.repo

chown -R jdoe:jdoe /home/jdoe

sed -i '/swap/ s/^/#/' /etc/fstab
echo net.bridge.bridge-nf-call-iptables=1 > /etc/sysctl.d/k8s.conf

cat - <<EOF2 > /home/jdoe/prep.sh
#!/bin/bash

DetectAndSetOS() {
  unset DISTRO
  if [ -f /etc/centos-release ]; then
    DISTRO=centos
	DOCKER=docker
	PKGMGR="yum -y -q"
  else
    DISTRO=ubuntu
	FIREWALL=ufw
	DOCKER=docker.io
	PKGMGR="apt-get -y -q"
  fi
  echo "Configuring for \$DISTRO"
}

SetupSSH() {
  echo "Setting up SSH key"
  mkdir --mode 700 /home/"\$USER"/.ssh
  echo "CHANGEME== rsa-key-20300114" >> /home/"\$USER"/.ssh/authorized_keys
  chmod 400 /home/"\$USER"/.ssh/authorized_keys
}

DisableSELinux() {
  echo "Disabling SELinux"
  sudo setenforce 0
  sudo sed -i '/^SELINUX=/ s/SELINUX=enforcing/SELINUX=permissive/' /etc/selinux/config
}

DisableFirewall() {
  echo "Disabling firewall (\$FIREWALL)"
  sudo systemctl disable \$FIREWALL
  sudo systemctl stop \$FIREWALL
}

DisableSwap() {
  # Kubelet wont run on a worker node with swap enabled, essentially because the potential
  # for swapping means performance guarantees cannot be met.
  echo "Disabling swap"
  sudo swapoff -a
  sudo sed -i '/swap/ s/^/#/' /etc/fstab 
}

InstallDocker() {
  echo "Installing (but not starting) Docker"
  sudo \$PKGMGR install \$DOCKER
}

SetupKubernetesRepo() {
  if [ "\$DISTRO" == "centos" ]; then
    # Kickstart doesn't do too well with non-core repos during install, so
  	# we set up the repo in kickstart and then force a cache update to induce yum to know
	  # about it.
	echo "Setting up k8s package repo"
    sudo yum -q makecache
  else
    echo "Setting up k8s package repo"
    curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add
    # note this is xenial even on eoan
    sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
    sudo apt-get -y -q update
  fi
}

InstallKubernetes() {
  echo "Installing (but not starting) k8s"
  sudo \$PKGMGR install kubelet kubeadm kubectl kubernetes-cni
}

SetupSysctl() {
  sysctl -w net.bridge.bridge-nf-call-iptables=1
  sudo bash -c "echo net.bridge.bridge-nf-call-iptables=1 > /etc/sysctl.d/k8s.conf"
}  

PromptForPreBootTasks() {
  echo "BEFORE you reboot, you must do the following:"
  echo "- set the hostname, e.g. sudo hostnamectl --static set-hostname node17.k8s"
  echo "- make any edits to the /etc/hosts file that you want, eg putting IPs of nodes and masters"
}

PromptForPostBootTasks() {
  echo "AFTER you reboot, you must do the following:"
  echo "- enable and start docker and kubelet, e.g. sudo systemctl <enable|start> docker"
  echo "- join worker nodes to the master node"
  echo "  (Use kubeadm token create --print-join-command on the master if you need to refresh the appropriate command)"
}

Main() {
   echo "This script automates the pre-install steps for the Luksa k8s book.  If you are on CentOS,"
   echo "some steps are skipped on the expectation that kickstart will already have talen care of them for you."
   DetectAndSetOS
   
   if [ \$DISTRO == "ubuntu" ]; then
     SetupSSH
     DisableSELinux
     DisableSwap
     DisableFirewall
	 SetupSysctl
   fi
   
   SetupKubernetesRepo
   InstallDocker  
   InstallKubernetes
   PromptForPreBootTasks
   PromptForPostBootTasks  
}

Main
EOF2

chown jdoe:jdoe /home/jdoe/prep.sh
chmod 700 /home/jdoe/prep.sh

%end
